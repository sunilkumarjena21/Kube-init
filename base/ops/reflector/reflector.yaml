# Source: https://github.com/emberstack/kubernetes-reflector/releases/download/v5.0.10/reflector.yaml
# The certificate defined in namespace `jitsi` results in a secret in namespace `jitsi`.
# The reflector allows the labeling of the resulting secret. This label is used by the reflector to
# copy this secret to namespace `monitoring`, where it is used by the Grafana ingress.
---
# Source: reflector/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: reflector
  namespace: kube-system
  labels:
    helm.sh/chart: reflector-5.0.10
    app.kubernetes.io/name: reflector
    app.kubernetes.io/instance: reflector
    app.kubernetes.io/version: "5.0.10"
    app.kubernetes.io/managed-by: Helm
---
# Source: reflector/templates/clusterRole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: reflector
  labels:
    helm.sh/chart: reflector-5.0.10
    app.kubernetes.io/name: reflector
    app.kubernetes.io/instance: reflector
    app.kubernetes.io/version: "5.0.10"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["watch", "list"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["watch", "list"]
  - apiGroups: ["certmanager.k8s.io"]
    resources: ["certificates", "certificates/finalizers"]
    verbs: ["watch", "list"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificates/finalizers"]
    verbs: ["watch", "list"]
---
# Source: reflector/templates/clusterRoleBinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: reflector
  labels:
    helm.sh/chart: reflector-5.0.10
    app.kubernetes.io/name: reflector
    app.kubernetes.io/instance: reflector
    app.kubernetes.io/version: "5.0.10"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  name: reflector
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: reflector
    namespace: kube-system
---
# Source: reflector/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reflector
  namespace: kube-system
  labels:
    helm.sh/chart: reflector-5.0.10
    app.kubernetes.io/name: reflector
    app.kubernetes.io/instance: reflector
    app.kubernetes.io/version: "5.0.10"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: reflector
      app.kubernetes.io/instance: reflector
  template:
    metadata:
      labels:
        app.kubernetes.io/name: reflector
        app.kubernetes.io/instance: reflector
    spec:
      serviceAccountName: reflector
      securityContext:
        fsGroup: 2000
      containers:
        - name: reflector
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
          image: "emberstack/kubernetes-reflector:5.0.10"
          imagePullPolicy: IfNotPresent
          env:
            - name: ES_Serilog__MinimumLevel__Default
              value: "Information"
          ports:
            - name: http
              containerPort: 25080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {}
